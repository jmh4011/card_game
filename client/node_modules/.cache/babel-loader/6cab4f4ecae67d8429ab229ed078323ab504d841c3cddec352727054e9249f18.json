{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from \"react\";\nimport { atom, useRecoilState } from \"recoil\";\nexport const modalState = atom({\n  key: 'modalState',\n  default: []\n});\nconst useModal = component => {\n  _s();\n  const [modalElements, setModal] = useRecoilState(modalState);\n  // 전역 상태에 element 자체를 상태로 저장한다.\n  const [isOpen, setIsOpen] = useState(false);\n  // 해당 컴포넌트가 열렸는지 안열렸는지 알려주는 상태\n  const id = `${component}-${new Date().getTime()}`;\n  // 컴포넌트에 id를 부여해서 식별한다.\n\n  const openModal = useCallback(() => {\n    setIsOpen(true);\n    setModal(pre => [...pre, {\n      id: id,\n      element: component\n    }]);\n    // modal을 전역상태에 추가한다\n    document.body.style.overflow = 'hidden';\n    // modal이 open되면 배경의 스크롤을 막아야함\n  }, [component, id, setModal]);\n  const closeModal = useCallback(() => {\n    setIsOpen(false);\n    setModal(pre => pre.filter(c => c.id !== id));\n    if (modalElements.length === 1) document.body.style.overflow = 'unset';\n  }, [id, modalElements, setModal]);\n  return {\n    isOpen,\n    openModal,\n    closeModal\n  };\n};\n_s(useModal, \"y5S5z1zh9B04WsASYv5t717tEe0=\", false, function () {\n  return [useRecoilState];\n});\nexport default useModal;","map":{"version":3,"names":["useCallback","useState","atom","useRecoilState","modalState","key","default","useModal","component","_s","modalElements","setModal","isOpen","setIsOpen","id","Date","getTime","openModal","pre","element","document","body","style","overflow","closeModal","filter","c","length"],"sources":["C:/Users/pipil/file/github/card_game/client/src/components/useModal.tsx"],"sourcesContent":["import { useCallback, useId, useState } from \"react\";\r\nimport { atom, useRecoilState } from \"recoil\";\r\n\r\n\r\nexport const modalState = atom<{ id: string; element: React.FC }[]>({\r\n  key: 'modalState',\r\n  default: [],\r\n});\r\n\r\n\r\nconst useModal = (component: React.FC) => {\r\n  const [modalElements, setModal] = useRecoilState(modalState);\r\n  // 전역 상태에 element 자체를 상태로 저장한다.\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  // 해당 컴포넌트가 열렸는지 안열렸는지 알려주는 상태\r\n  const id = `${component}-${new Date().getTime()}`;\r\n  // 컴포넌트에 id를 부여해서 식별한다.\r\n\r\n  const openModal = useCallback(() => {\r\n    setIsOpen(true);\r\n    setModal((pre) => [...pre, { id: id, element: component }]);\r\n    // modal을 전역상태에 추가한다\r\n    document.body.style.overflow = 'hidden';\r\n    // modal이 open되면 배경의 스크롤을 막아야함\r\n  }, [component, id, setModal]);\r\n\r\n  const closeModal = useCallback(() => {\r\n    setIsOpen(false);\r\n    setModal((pre) => pre.filter((c) => c.id !== id));\r\n    if (modalElements.length === 1) document.body.style.overflow = 'unset';\r\n  }, [id, modalElements, setModal]);\r\n\r\n  return { isOpen, openModal, closeModal };\r\n};\r\n\r\nexport default useModal;"],"mappings":";AAAA,SAASA,WAAW,EAASC,QAAQ,QAAQ,OAAO;AACpD,SAASC,IAAI,EAAEC,cAAc,QAAQ,QAAQ;AAG7C,OAAO,MAAMC,UAAU,GAAGF,IAAI,CAAsC;EAClEG,GAAG,EAAE,YAAY;EACjBC,OAAO,EAAE;AACX,CAAC,CAAC;AAGF,MAAMC,QAAQ,GAAIC,SAAmB,IAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,aAAa,EAAEC,QAAQ,CAAC,GAAGR,cAAc,CAACC,UAAU,CAAC;EAC5D;EACA,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC3C;EACA,MAAMa,EAAE,GAAI,GAAEN,SAAU,IAAG,IAAIO,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAE,EAAC;EACjD;;EAEA,MAAMC,SAAS,GAAGjB,WAAW,CAAC,MAAM;IAClCa,SAAS,CAAC,IAAI,CAAC;IACfF,QAAQ,CAAEO,GAAG,IAAK,CAAC,GAAGA,GAAG,EAAE;MAAEJ,EAAE,EAAEA,EAAE;MAAEK,OAAO,EAAEX;IAAU,CAAC,CAAC,CAAC;IAC3D;IACAY,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,GAAG,QAAQ;IACvC;EACF,CAAC,EAAE,CAACf,SAAS,EAAEM,EAAE,EAAEH,QAAQ,CAAC,CAAC;EAE7B,MAAMa,UAAU,GAAGxB,WAAW,CAAC,MAAM;IACnCa,SAAS,CAAC,KAAK,CAAC;IAChBF,QAAQ,CAAEO,GAAG,IAAKA,GAAG,CAACO,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACZ,EAAE,KAAKA,EAAE,CAAC,CAAC;IACjD,IAAIJ,aAAa,CAACiB,MAAM,KAAK,CAAC,EAAEP,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,GAAG,OAAO;EACxE,CAAC,EAAE,CAACT,EAAE,EAAEJ,aAAa,EAAEC,QAAQ,CAAC,CAAC;EAEjC,OAAO;IAAEC,MAAM;IAAEK,SAAS;IAAEO;EAAW,CAAC;AAC1C,CAAC;AAACf,EAAA,CAvBIF,QAAQ;EAAA,QACsBJ,cAAc;AAAA;AAwBlD,eAAeI,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}