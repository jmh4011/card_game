{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from \"react\";\nimport { atom, useRecoilState } from \"recoil\";\nexport const modalState = atom({\n  key: 'modalState',\n  default: []\n});\nconst isArrEmpty = arr => arr.length === 0;\nconst useModal = component => {\n  _s();\n  const [modalElements, setModal] = useRecoilState(modalState);\n  // 전역 상태에 element 자체를 상태로 저장한다.\n  const isOpen = modalElements.some(modal => modal.element === component);\n  // 해당 컴포넌트가 열렸는지 안열렸는지 알려주는 상태\n  const id = `${component.displayName}-${new Date().getTime()}`;\n  // 컴포넌트에 id를 부여해서 식별한다.\n\n  const openModal = useCallback(() => {\n    if (!isOpen) {\n      setModal(pre => [...pre, {\n        id: id,\n        element: component\n      }]);\n    }\n    // modal을 전역상태에 추가한다\n    document.body.style.overflow = 'hidden';\n    // modal이 open되면 배경의 스크롤을 막아야함\n  }, [component, id, setModal]);\n  const closeModal = useCallback(() => {\n    setModal(pre => pre.filter(c => c.element !== component));\n    // modal을 전역상태에서 제거한다.\n\n    if (isArrEmpty(modalElements)) document.body.style.overflow = 'unset';\n    // modal이 모두 꺼지면 배경의 스크롤이 가능해야함\n  }, [id, modalElements, setModal]);\n  return {\n    isOpen,\n    openModal,\n    closeModal\n  };\n};\n_s(useModal, \"LhzfeIUDbJzjT9Ap8lZ85uMaWfo=\", false, function () {\n  return [useRecoilState];\n});\nexport default useModal;","map":{"version":3,"names":["useCallback","atom","useRecoilState","modalState","key","default","isArrEmpty","arr","length","useModal","component","_s","modalElements","setModal","isOpen","some","modal","element","id","displayName","Date","getTime","openModal","pre","document","body","style","overflow","closeModal","filter","c"],"sources":["C:/Users/pipil/file/github/card_game/client/src/components/useModal.tsx"],"sourcesContent":["import { useCallback, useId, useState } from \"react\";\r\nimport { atom, useRecoilState } from \"recoil\";\r\n\r\n\r\nexport const modalState = atom<{ id: string; element: React.FC }[]>({\r\n  key: 'modalState',\r\n  default: [],\r\n});\r\n\r\nconst isArrEmpty = (arr: unknown[]) => arr.length === 0;\r\n\r\nconst useModal = (component: React.FC) => {\r\n  const [modalElements, setModal] = useRecoilState(modalState);\r\n  // 전역 상태에 element 자체를 상태로 저장한다.\r\n  const isOpen = modalElements.some((modal) => modal.element === component);\r\n  // 해당 컴포넌트가 열렸는지 안열렸는지 알려주는 상태\r\n  const id = `${component.displayName}-${new Date().getTime()}`;\r\n  // 컴포넌트에 id를 부여해서 식별한다.\r\n\r\n  const openModal = useCallback(() => {\r\n    if (!isOpen) {\r\n      setModal((pre) => [...pre, { id: id, element: component }]);\r\n    }\r\n    // modal을 전역상태에 추가한다\r\n    document.body.style.overflow = 'hidden';\r\n    // modal이 open되면 배경의 스크롤을 막아야함\r\n  }, [component, id, setModal]);\r\n\r\n  const closeModal = useCallback(() => {\r\n    setModal((pre) => pre.filter((c) => c.element !== component));\r\n    // modal을 전역상태에서 제거한다.\r\n\r\n    if (isArrEmpty(modalElements)) document.body.style.overflow = 'unset';\r\n    // modal이 모두 꺼지면 배경의 스크롤이 가능해야함\r\n  }, [id, modalElements, setModal]);\r\n\r\n  return { isOpen, openModal, closeModal };\r\n};\r\n\r\nexport default useModal;"],"mappings":";AAAA,SAASA,WAAW,QAAyB,OAAO;AACpD,SAASC,IAAI,EAAEC,cAAc,QAAQ,QAAQ;AAG7C,OAAO,MAAMC,UAAU,GAAGF,IAAI,CAAsC;EAClEG,GAAG,EAAE,YAAY;EACjBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAIC,GAAc,IAAKA,GAAG,CAACC,MAAM,KAAK,CAAC;AAEvD,MAAMC,QAAQ,GAAIC,SAAmB,IAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,aAAa,EAAEC,QAAQ,CAAC,GAAGX,cAAc,CAACC,UAAU,CAAC;EAC5D;EACA,MAAMW,MAAM,GAAGF,aAAa,CAACG,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAACC,OAAO,KAAKP,SAAS,CAAC;EACzE;EACA,MAAMQ,EAAE,GAAI,GAAER,SAAS,CAACS,WAAY,IAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAE,EAAC;EAC7D;;EAEA,MAAMC,SAAS,GAAGtB,WAAW,CAAC,MAAM;IAClC,IAAI,CAACc,MAAM,EAAE;MACXD,QAAQ,CAAEU,GAAG,IAAK,CAAC,GAAGA,GAAG,EAAE;QAAEL,EAAE,EAAEA,EAAE;QAAED,OAAO,EAAEP;MAAU,CAAC,CAAC,CAAC;IAC7D;IACA;IACAc,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,GAAG,QAAQ;IACvC;EACF,CAAC,EAAE,CAACjB,SAAS,EAAEQ,EAAE,EAAEL,QAAQ,CAAC,CAAC;EAE7B,MAAMe,UAAU,GAAG5B,WAAW,CAAC,MAAM;IACnCa,QAAQ,CAAEU,GAAG,IAAKA,GAAG,CAACM,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACb,OAAO,KAAKP,SAAS,CAAC,CAAC;IAC7D;;IAEA,IAAIJ,UAAU,CAACM,aAAa,CAAC,EAAEY,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,GAAG,OAAO;IACrE;EACF,CAAC,EAAE,CAACT,EAAE,EAAEN,aAAa,EAAEC,QAAQ,CAAC,CAAC;EAEjC,OAAO;IAAEC,MAAM;IAAEQ,SAAS;IAAEM;EAAW,CAAC;AAC1C,CAAC;AAACjB,EAAA,CA1BIF,QAAQ;EAAA,QACsBP,cAAc;AAAA;AA2BlD,eAAeO,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}