{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from \"react\";\nimport { atom, useRecoilState } from \"recoil\";\nexport const modalState = atom({\n  key: 'modalState',\n  default: []\n});\nconst isArrEmpty = arr => arr.length === 0;\nconst useModal = component => {\n  _s();\n  const [modalElements, setModal] = useRecoilState(modalState);\n  // 전역 상태에 element 자체를 상태로 저장한다.\n  const isOpen = modalElements.includes(component);\n  // 해당 컴포넌트가 열렸는지 안열렸는지 알려주는 상태\n\n  const openModal = useCallback(() => {\n    setModal(pre => [...pre, component]);\n    // modal을 전역상태에 추가한다\n    document.body.style.overflow = 'hidden';\n    // modal이 open되면 배경의 스크롤을 막아야함\n  }, [component, setModal]);\n  const closeModal = useCallback(() => {\n    setModal(pre => pre.filter(c => c !== component));\n    // modal을 전역상태에서 제거한다.\n\n    if (isArrEmpty(modalElements)) document.body.style.overflow = 'unset';\n    // modal이 모두 꺼지면 배경의 스크롤이 가능해야함\n  }, [id, modalElements, setModal]);\n  return {\n    isOpen,\n    openModal,\n    closeModal\n  };\n};\n_s(useModal, \"LhzfeIUDbJzjT9Ap8lZ85uMaWfo=\", false, function () {\n  return [useRecoilState];\n});\nexport default useModal;","map":{"version":3,"names":["useCallback","atom","useRecoilState","modalState","key","default","isArrEmpty","arr","length","useModal","component","_s","modalElements","setModal","isOpen","includes","openModal","pre","document","body","style","overflow","closeModal","filter","c","id"],"sources":["C:/Users/pipil/file/github/card_game/client/src/components/useModal.tsx"],"sourcesContent":["import { useCallback, useId, useState } from \"react\";\r\nimport { atom, useRecoilState } from \"recoil\";\r\n\r\n\r\nexport const modalState = atom<React.FC[]>({\r\n  key: 'modalState',\r\n  default: [],\r\n});\r\n\r\nconst isArrEmpty = (arr: unknown[]) => arr.length === 0;\r\n\r\nconst useModal = (component: React.FC) => {\r\n  const [modalElements, setModal] = useRecoilState(modalState);\r\n  // 전역 상태에 element 자체를 상태로 저장한다.\r\n  const isOpen = modalElements.includes(component);\r\n  // 해당 컴포넌트가 열렸는지 안열렸는지 알려주는 상태\r\n\r\n  const openModal = useCallback(() => {\r\n    setModal((pre) => [...pre, component]);\r\n    // modal을 전역상태에 추가한다\r\n    document.body.style.overflow = 'hidden';\r\n    // modal이 open되면 배경의 스크롤을 막아야함\r\n  }, [component, setModal]);\r\n\r\n  const closeModal = useCallback(() => {\r\n    setModal((pre) => pre.filter((c) => c !== component));\r\n    // modal을 전역상태에서 제거한다.\r\n\r\n    if (isArrEmpty(modalElements)) document.body.style.overflow = 'unset';\r\n    // modal이 모두 꺼지면 배경의 스크롤이 가능해야함\r\n  }, [id, modalElements, setModal]);\r\n\r\n  return { isOpen, openModal, closeModal };\r\n};\r\n\r\nexport default useModal;"],"mappings":";AAAA,SAASA,WAAW,QAAyB,OAAO;AACpD,SAASC,IAAI,EAAEC,cAAc,QAAQ,QAAQ;AAG7C,OAAO,MAAMC,UAAU,GAAGF,IAAI,CAAa;EACzCG,GAAG,EAAE,YAAY;EACjBC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,MAAMC,UAAU,GAAIC,GAAc,IAAKA,GAAG,CAACC,MAAM,KAAK,CAAC;AAEvD,MAAMC,QAAQ,GAAIC,SAAmB,IAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,aAAa,EAAEC,QAAQ,CAAC,GAAGX,cAAc,CAACC,UAAU,CAAC;EAC5D;EACA,MAAMW,MAAM,GAAGF,aAAa,CAACG,QAAQ,CAACL,SAAS,CAAC;EAChD;;EAEA,MAAMM,SAAS,GAAGhB,WAAW,CAAC,MAAM;IAClCa,QAAQ,CAAEI,GAAG,IAAK,CAAC,GAAGA,GAAG,EAAEP,SAAS,CAAC,CAAC;IACtC;IACAQ,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,GAAG,QAAQ;IACvC;EACF,CAAC,EAAE,CAACX,SAAS,EAAEG,QAAQ,CAAC,CAAC;EAEzB,MAAMS,UAAU,GAAGtB,WAAW,CAAC,MAAM;IACnCa,QAAQ,CAAEI,GAAG,IAAKA,GAAG,CAACM,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKd,SAAS,CAAC,CAAC;IACrD;;IAEA,IAAIJ,UAAU,CAACM,aAAa,CAAC,EAAEM,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,QAAQ,GAAG,OAAO;IACrE;EACF,CAAC,EAAE,CAACI,EAAE,EAAEb,aAAa,EAAEC,QAAQ,CAAC,CAAC;EAEjC,OAAO;IAAEC,MAAM;IAAEE,SAAS;IAAEM;EAAW,CAAC;AAC1C,CAAC;AAACX,EAAA,CAtBIF,QAAQ;EAAA,QACsBP,cAAc;AAAA;AAuBlD,eAAeO,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}